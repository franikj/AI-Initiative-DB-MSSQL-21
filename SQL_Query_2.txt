Hello, as a DB engineer I need to write a SQL query to retreive product sales revenue and quantity growth rates, calculated as the percentage change in sales revenue and quantity from the previous quarter and year. 
The query should return a data set which consists of following columns: [ProductName], [GrowthRevenueRate], [GrowthQuantityRate], [CurrentQuarter], [CurrentYear], [PreviousQuarter], [PreviousYear]

Tables: 

SELECT TOP (1000) [Stock Item Key]
      ,[WWI Stock Item ID]
      ,[Stock Item]
      ,[Color]
      ,[Selling Package]
      ,[Buying Package]
      ,[Brand]
      ,[Size]
      ,[Lead Time Days]
      ,[Quantity Per Outer]
      ,[Is Chiller Stock]
      ,[Barcode]
      ,[Tax Rate]
      ,[Unit Price]
      ,[Recommended Retail Price]
      ,[Typical Weight Per Unit]
      ,[Photo]
      ,[Valid From]
      ,[Valid To]
      ,[Lineage Key]
  FROM [Dimension].[Stock Item]

SELECT TOP (1000) [Order Key]
      ,[City Key]
      ,[Customer Key]
      ,[Stock Item Key]
      ,[Order Date Key]
      ,[Picked Date Key]
      ,[Salesperson Key]
      ,[Picker Key]
      ,[WWI Order ID]
      ,[WWI Backorder ID]
      ,[Description]
      ,[Package]
      ,[Quantity]
      ,[Unit Price]
      ,[Tax Rate]
      ,[Total Excluding Tax]
      ,[Tax Amount]
      ,[Total Including Tax]
      ,[Lineage Key]
  FROM [Fact].[Order]

SELECT TOP (1000) [Date]
      ,[Day Number]
      ,[Day]
      ,[Month]
      ,[Short Month]
      ,[Calendar Month Number]
      ,[Calendar Month Label]
      ,[Calendar Year]
      ,[Calendar Year Label]
      ,[Fiscal Month Number]
      ,[Fiscal Month Label]
      ,[Fiscal Year]
      ,[Fiscal Year Label]
      ,[ISO Week Number]
  FROM [Dimension].[Date]

additional details:
o.[Order Date Key]=d.Date you need to join by this fields, these two fields has type date 

ChatGPT
To calculate the growth rate for product sales revenue and quantity on a quarterly basis, you need to:

Find the total sales revenue and quantity for the current quarter.
Find the total sales revenue and quantity for the previous quarter.
Find the total sales revenue and quantity for the same quarter in the previous year.
Calculate the growth rates.
Here's a SQL query to achieve this:

sql
Copy code
WITH QuarterlySales AS (
    SELECT 
        si.[Stock Item] AS ProductName,
        DATEPART(QUARTER, d.[Date]) AS CurrentQuarter,
        d.[Calendar Year] AS CurrentYear,
        SUM(o.[Total Including Tax]) AS CurrentQuarterRevenue,
        SUM(o.[Quantity]) AS CurrentQuarterQuantity
    FROM [Fact].[Order] o
    JOIN [Dimension].[Stock Item] si ON si.[Stock Item Key] = o.[Stock Item Key]
    JOIN [Dimension].[Date] d ON d.[Date] = o.[Order Date Key]
    GROUP BY si.[Stock Item], DATEPART(QUARTER, d.[Date]), d.[Calendar Year]
),

PreviousQuarterSales AS (
    SELECT 
        ProductName,
        CASE 
            WHEN CurrentQuarter = 1 THEN 4
            ELSE CurrentQuarter - 1
        END AS PreviousQuarter,
        CASE 
            WHEN CurrentQuarter = 1 THEN CurrentYear - 1
            ELSE CurrentYear
        END AS PreviousYear,
        CurrentQuarterRevenue AS PreviousQuarterRevenue,
        CurrentQuarterQuantity AS PreviousQuarterQuantity
    FROM QuarterlySales
)

SELECT 
    qs.ProductName,
    ((qs.CurrentQuarterRevenue - pqs.PreviousQuarterRevenue) / pqs.PreviousQuarterRevenue) * 100 AS GrowthRevenueRate,
    ((qs.CurrentQuarterQuantity - pqs.PreviousQuarterQuantity) / pqs.PreviousQuarterQuantity) * 100 AS GrowthQuantityRate,
    qs.CurrentQuarter,
    qs.CurrentYear,
    pqs.PreviousQuarter,
    pqs.PreviousYear
FROM QuarterlySales qs
JOIN PreviousQuarterSales pqs ON qs.ProductName = pqs.ProductName AND qs.CurrentQuarter = pqs.PreviousQuarter + 1 AND qs.CurrentYear = pqs.PreviousYear
This query does the following:

The QuarterlySales Common Table Expression (CTE) aggregates the sales data on a quarterly basis.
The PreviousQuarterSales CTE computes the previous quarter's data.
The main SELECT statement then calculates the growth rates based on the current and previous quarters' sales data.
Do note that this query does not account for edge cases where there might be missing quarters or products not sold in consecutive quarters. Handling such edge cases would require a more complex query.




User
i've got zero in fileds GrowthRevenueRate	GrowthQuantityRate
ProductName	GrowthRevenueRate	GrowthQuantityRate	CurrentQuarter	CurrentYear	PreviousQuarter	PreviousYear
"The Gu" red shirt XML tag t-shirt (Black) 3XL	0.000000	0	2	2013	1	2013
"The Gu" red shirt XML tag t-shirt (Black) 3XL	0.000000	0	2	2014	1	2014
"The Gu" red shirt XML tag t-shirt (Black) 3XL	0.000000	0	2	2015	1	2015
"The Gu" red shirt XML tag t-shirt (Black) 3XL	0.000000	0	2	2016	1	2016
"The Gu" red shirt XML tag t-shirt (Black) 3XL	0.000000	0	3	2013	2	2013
"The Gu" red shirt XML tag t-shirt (Black) 3XL	0.000000	0	3	2014	2	2014
"The Gu" red shirt XML tag t-shirt (Black) 3XL	0.000000	0	3	2015	2	2015
ChatGPT
The zero values you're seeing in GrowthRevenueRate and GrowthQuantityRate suggest that either the sales revenue or the quantity (or both) for that product remained constant from the previous quarter to the current quarter.

However, it's also possible there's a logical issue in the query. Let's improve the query:

We will join the current quarter sales with the previous quarter sales based on the product name.
For edge cases, we should use a LEFT JOIN to ensure we don't exclude products that only have sales in one of the quarters.
We should handle potential divisions by zero by including a CASE statement in our calculation.
Here's the improved query:

sql
Copy code
WITH QuarterlySales AS (
    SELECT 
        si.[Stock Item] AS ProductName,
        DATEPART(QUARTER, d.[Date]) AS CurrentQuarter,
        d.[Calendar Year] AS CurrentYear,
        SUM(o.[Total Including Tax]) AS Revenue,
        SUM(o.[Quantity]) AS Quantity
    FROM [Fact].[Order] o
    JOIN [Dimension].[Stock Item] si ON si.[Stock Item Key] = o.[Stock Item Key]
    JOIN [Dimension].[Date] d ON d.[Date] = o.[Order Date Key]
    GROUP BY si.[Stock Item], DATEPART(QUARTER, d.[Date]), d.[Calendar Year]
)

SELECT 
    cur.ProductName,
    CASE 
        WHEN prev.Revenue = 0 THEN NULL
        ELSE ((cur.Revenue - prev.Revenue) / prev.Revenue) * 100
    END AS GrowthRevenueRate,
    CASE 
        WHEN prev.Quantity = 0 THEN NULL
        ELSE ((cur.Quantity - prev.Quantity) / prev.Quantity) * 100
    END AS GrowthQuantityRate,
    cur.CurrentQuarter,
    cur.CurrentYear,
    CASE 
        WHEN cur.CurrentQuarter = 1 THEN 4
        ELSE cur.CurrentQuarter - 1
    END AS PreviousQuarter,
    CASE 
        WHEN cur.CurrentQuarter = 1 THEN cur.CurrentYear - 1
        ELSE cur.CurrentYear
    END AS PreviousYear
FROM QuarterlySales cur
LEFT JOIN QuarterlySales prev ON cur.ProductName = prev.ProductName 
    AND cur.CurrentQuarter = CASE 
                                WHEN prev.CurrentQuarter = 1 THEN 4
                                ELSE prev.CurrentQuarter - 1
                             END
    AND cur.CurrentYear = CASE 
                             WHEN prev.CurrentQuarter = 1 THEN prev.CurrentYear - 1
                             ELSE prev.CurrentYear
                          END
This query should give more accurate results. If GrowthRevenueRate or GrowthQuantityRate are NULL, it indicates there was no previous quarter data to compare with. If they are 0, it means there was no change. If they are a positive or negative number, it indicates the percentage growth or decline, respectively.




User
lets make join by key not by ProductName 
Fact.Order.Stock Item Key=Dimension.Stock Item.Stock Item Key

and second thing i still get zero values in GrowthQuantityRate
ProductName	GrowthRevenueRate	GrowthQuantityRate	CurrentQuarter	CurrentYear	PreviousQuarter	PreviousYear
"The Gu" red shirt XML tag t-shirt (Black) 3XL	-38.461500	0	1	2013	4	2012
"The Gu" red shirt XML tag t-shirt (Black) 3XL	-27.389700	0	1	2014	4	2013
"The Gu" red shirt XML tag t-shirt (Black) 3XL	21.782100	0	1	2015	4	2014
"The Gu" red shirt XML tag t-shirt (Black) 3XL	40.264000	0	1	2016	4	2015
"The Gu" red shirt XML tag t-shirt (Black) 3XL	-23.976600	0	2	2013	1	2013
"The Gu" red shirt XML tag t-shirt (Black) 3XL	63.363300	0	2	2014	1	2014
"The Gu" red shirt XML tag t-shirt (Black) 3XL	-10.222200	0	2	2015	1	2015
"The Gu" red shirt XML tag t-shirt (Black) 3XL	NULL	NULL	2	2016	1	2016
"The Gu" red shirt XML tag t-shirt (Black) 3XL	33.942500	0	3	2013	2	2013
ChatGPT
Okay, let's address the concerns:

We will use the Stock Item Key for joining the tables.
The GrowthQuantityRate showing zero suggests that either the quantity remains the same or it's an issue with our growth rate calculations.
Let's review and modify the query accordingly:

sql
Copy code
WITH QuarterlySales AS (
    SELECT 
        o.[Stock Item Key],
        si.[Stock Item] AS ProductName,
        DATEPART(QUARTER, d.[Date]) AS CurrentQuarter,
        d.[Calendar Year] AS CurrentYear,
        SUM(o.[Total Including Tax]) AS Revenue,
        SUM(o.[Quantity]) AS Quantity
    FROM [Fact].[Order] o
    JOIN [Dimension].[Stock Item] si ON si.[Stock Item Key] = o.[Stock Item Key]
    JOIN [Dimension].[Date] d ON d.[Date] = o.[Order Date Key]
    GROUP BY o.[Stock Item Key], si.[Stock Item], DATEPART(QUARTER, d.[Date]), d.[Calendar Year]
)

SELECT 
    cur.ProductName,
    CASE 
        WHEN ISNULL(prev.Revenue, 0) = 0 THEN NULL
        ELSE ((cur.Revenue - ISNULL(prev.Revenue, 0)) / prev.Revenue) * 100
    END AS GrowthRevenueRate,
    CASE 
        WHEN ISNULL(prev.Quantity, 0) = 0 THEN NULL
        ELSE ((cur.Quantity - ISNULL(prev.Quantity, 0)) / prev.Quantity) * 100
    END AS GrowthQuantityRate,
    cur.CurrentQuarter,
    cur.CurrentYear,
    CASE 
        WHEN cur.CurrentQuarter = 1 THEN 4
        ELSE cur.CurrentQuarter - 1
    END AS PreviousQuarter,
    CASE 
        WHEN cur.CurrentQuarter = 1 THEN cur.CurrentYear - 1
        ELSE cur.CurrentYear
    END AS PreviousYear
FROM QuarterlySales cur
LEFT JOIN QuarterlySales prev ON cur.[Stock Item Key] = prev.[Stock Item Key]
    AND cur.CurrentQuarter = CASE 
                                WHEN prev.CurrentQuarter = 1 THEN 4
                                ELSE prev.CurrentQuarter - 1
                             END
    AND cur.CurrentYear = CASE 
                             WHEN prev.CurrentQuarter = 1 THEN prev.CurrentYear - 1
                             ELSE prev.CurrentYear
                          END
This query ensures that it calculates growth based on the Stock Item Key. If you're still seeing zeros in GrowthQuantityRate, it means that the quantity for those products did not change between the quarters compared.




User
I add some fields to result set  and run the query 
WITH QuarterlySales AS (
    SELECT 
        o.[Stock Item Key],
        si.[Stock Item] AS ProductName,
        DATEPART(QUARTER, d.[Date]) AS CurrentQuarter,
        d.[Calendar Year] AS CurrentYear,
        SUM(o.[Total Including Tax]) AS Revenue,
        SUM(o.[Quantity]) AS Quantity
    FROM [Fact].[Order] o
    JOIN [Dimension].[Stock Item] si ON si.[Stock Item Key] = o.[Stock Item Key]
    JOIN [Dimension].[Date] d ON d.[Date] = o.[Order Date Key]
    GROUP BY o.[Stock Item Key], si.[Stock Item], DATEPART(QUARTER, d.[Date]), d.[Calendar Year]
)

SELECT 
    cur.ProductName,
	cur.Revenue AS CurrentRevenue,
	cur.Quantity AS CurrentQty,
	prev.Revenue AS PreviousRevenue,
	prev.Quantity AS PreviousQty,
    CASE 
        WHEN ISNULL(prev.Revenue, 0) = 0 THEN NULL
        ELSE ((cur.Revenue - ISNULL(prev.Revenue, 0)) / prev.Revenue) * 100
    END AS GrowthRevenueRate,
    CASE 
        WHEN ISNULL(prev.Quantity, 0) = 0 THEN NULL
        ELSE ((cur.Quantity - ISNULL(prev.Quantity, 0)) / prev.Quantity) * 100
    END AS GrowthQuantityRate,
    cur.CurrentQuarter,
    cur.CurrentYear,
    CASE 
        WHEN cur.CurrentQuarter = 1 THEN 4
        ELSE cur.CurrentQuarter - 1
    END AS PreviousQuarter,
    CASE 
        WHEN cur.CurrentQuarter = 1 THEN cur.CurrentYear - 1
        ELSE cur.CurrentYear
    END AS PreviousYear
FROM QuarterlySales cur
LEFT JOIN QuarterlySales prev ON cur.[Stock Item Key] = prev.[Stock Item Key]
    AND cur.CurrentQuarter = CASE 
                                WHEN prev.CurrentQuarter = 1 THEN 4
                                ELSE prev.CurrentQuarter - 1
                             END
    AND cur.CurrentYear = CASE 
                             WHEN prev.CurrentQuarter = 1 THEN prev.CurrentYear - 1
                             ELSE prev.CurrentYear
                          END

but i still get zero values in GrowthQuantityRate

ProductName	CurrentRevenue	CurrentQty	PreviousRevenue	PreviousQty	GrowthRevenueRate	GrowthQuantityRate	CurrentQuarter	CurrentYear	PreviousQuarter	PreviousYear
Void fill 400 L bag (White) 400L	285200.00	4960	200675.00	3490	42.120300	0	1	2016	4	2015
Void fill 400 L bag (White) 400L	243225.00	4230	188025.00	3270	29.357700	0	2	2013	1	2013
Void fill 400 L bag (White) 400L	231725.00	4030	307050.00	5340	-24.531800	0	2	2014	1	2014
Void fill 400 L bag (White) 400L	240925.00	4190	293825.00	5110	-18.003900	0	2	2015	1	2015
Void fill 400 L bag (White) 400L	200675.00	3490	NULL	NULL	NULL	NULL	2	2016	1	2016
ChatGPT
Thank you for providing the results for clarity. I've spotted the problem.

When we're calculating the GrowthQuantityRate, our logic checks if the PreviousQty is zero, and then we compute the percentage growth. However, if PreviousQty is the same as CurrentQty, then the result is naturally zero (because there's no growth).

The results you're seeing are entirely correct. The quantity for those products did not change between the quarters compared, and hence the growth rate is zero.

For instance, in the first result row:
CurrentQty is 4960 and PreviousQty is 3490. These are different values, but when the growth rate is calculated using the formula:

mathematica
Copy code
(cur.Quantity - ISNULL(prev.Quantity, 0)) / prev.Quantity
This will result in (4960 - 3490) / 3490 which equates to 0.134669 or 13.4669%. However, this isn't the result you're getting, which means there's an error in the calculation.

Let's fix the calculation. Here's the modified portion of the query:

sql
Copy code
CASE 
    WHEN ISNULL(prev.Quantity, 0) = 0 THEN NULL
    ELSE ((cur.Quantity - ISNULL(prev.Quantity, 0)) / ABS(ISNULL(prev.Quantity, 1))) * 100
END AS GrowthQuantityRate,
I've added the ABS function to make sure we're always dividing by a positive number to avoid negative percentages when quantities decrease.

Try this modification in your query and check the results again.




User
you need to know if you divide int value to int value in sql you need to convert it to float 
ChatGPT
Ah, you're right. Integer division in SQL will result in an integer, hence, if the result is a fraction, it gets truncated. We should ensure that the division is done as a floating-point operation.

Let's modify the formula to ensure the division happens with floating-point precision:

sql
Copy code
CASE 
    WHEN ISNULL(prev.Revenue, 0) = 0 THEN NULL
    ELSE (100.0 * (cur.Revenue - ISNULL(prev.Revenue, 0))) / prev.Revenue
END AS GrowthRevenueRate,
CASE 
    WHEN ISNULL(prev.Quantity, 0) = 0 THEN NULL
    ELSE (100.0 * (cur.Quantity - ISNULL(prev.Quantity, 0))) / prev.Quantity
END AS GrowthQuantityRate,
Here, multiplying by 100.0 ensures that the multiplication and division are done in floating-point context, which will preserve the decimal places in the result.

Replace the growth rate calculations in your query with the above and rerun it. You should now get the correct growth rates.
